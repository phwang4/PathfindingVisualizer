{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","onMouseOut","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","node1","node2","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","START_NODE_COL","START_NODE_ROW","FINISH_NODE_COL","FINISH_NODE_ROW","PathfindingVisualizer","state","mouseIsPressed","startNodeMoving","finishNodeMoving","getInitialGrid","setState","newGrid","console","log","setNode","checkNode","getNewGridWithStartToggled","getNewGridWithFinishToggled","getNewGridWithWallToggled","getNewGridWithWallToggledOff","name","document","getElementById","nodesInShortestPathOrder","i","setTimeout","NodesInShortestPathOrder","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","type","data-toggle","onClick","visualizeDijkstra","clear","map","rowIdx","key","nodeIdx","handleMouseEnter","handleMouseOut","handleMouseDown","handleMouseUp","currentRow","createNode","isPath","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2TAIqBA,G,6KACT,IAAD,EAWHC,KAAKC,MATPC,EAFK,EAELA,IACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,QACAC,EALK,EAKLA,OACAC,EANK,EAMLA,YACAC,EAPK,EAOLA,aACAC,EARK,EAQLA,UACAC,EATK,EASLA,WACAC,EAVK,EAULA,IAEIC,EAAiBR,EACnB,cACAC,EACA,aACAC,EACA,YACA,GAEJ,OACE,yBACEO,GAAE,eAAUF,EAAV,YAAiBR,GACnBW,UAAS,eAAUF,GACnBJ,aAAc,kBAAMA,EAAaG,EAAKR,IACtCI,YAAa,kBAAMA,EAAYI,EAAKR,IACpCM,UAAW,kBAAMA,EAAUE,EAAKR,IAChCO,WAAY,kBAAMA,EAAWC,EAAKR,U,GA5BRY,c,0BCJ3B,SAASC,EAASC,EAAMC,EAAWC,GACxC,IAAMC,EAAsB,GAC5BF,EAAUG,SAAW,EAGrB,IADA,IAAMC,EA0CR,SAAqBL,GACnB,IADyB,EACnBM,EAAQ,GADW,cAEPN,GAFO,IAEzB,2BAAwB,CAAC,IAAD,EAAbN,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAda,EAAa,QACtBD,EAAME,KAAKD,IAFS,gCAFC,8BAOzB,OAAOD,EAjDgBG,CAAYT,GAC1BK,EAAeK,QAAQ,CAG9BC,EAAoBN,GACpB,IAAMO,EAAcP,EAAeQ,QACnC,IAAID,EAAYvB,OAAhB,CAEA,GAAIuB,EAAYR,WAAaU,IAAU,OAAOX,EAK9C,GAJAS,EAAYG,WAAY,EAGxBZ,EAAoBK,KAAKI,GACrBA,IAAgBV,EAAY,OAAOC,EACvCa,EAAyBJ,EAAaZ,KAI1C,SAASW,EAAoBN,GAC3BA,EAAeY,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMd,SAAWe,EAAMf,YAG/D,SAASY,EAAyBT,EAAMP,GACtC,IAD4C,EACtCoB,EAOR,SAA+Bb,EAAMP,GAAO,IAClCN,EAAaa,EAAbb,IAAKR,EAAQqB,EAARrB,IAEPmC,EAAY,GAEd3B,EAAM,GAAG2B,EAAUb,KAAKR,EAAKN,EAAM,GAAGR,IACtCQ,EAAMM,EAAKU,OAAS,GAAGW,EAAUb,KAAKR,EAAKN,EAAM,GAAGR,IACpDA,EAAM,GAAGmC,EAAUb,KAAKR,EAAKN,GAAKR,EAAM,IACxCA,EAAMc,EAAK,GAAGU,OAAS,GAAGW,EAAUb,KAAKR,EAAKN,GAAKR,EAAM,IAC7D,OAAOmC,EAAUC,QAAO,SAAAC,GAAQ,OAAKA,EAASR,aAhBnBS,CAAsBjB,EAAMP,GADX,cAErBoB,GAFqB,IAE5C,2BAA2C,CAAC,IAAjCG,EAAgC,QACzCA,EAASnB,SAAWG,EAAKH,SAAW,EACpCmB,EAASE,aAAelB,GAJkB,+BChB9C,IAAImB,EAAiB,GACjBC,EAAiB,GACjBC,EAAkB,GAClBC,EAAkB,GAEDC,E,kDACnB,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACX/B,KAAM,GACNgC,gBAAgB,EAChBC,iBAAiB,EACjBC,kBAAkB,GANR,E,gEAWZ,IAAMlC,EAAOmC,IACbnD,KAAKoD,SAAS,CAAEpC,W,8BAIhB0B,EAAiB,GACjBC,EAAiB,GACjBC,EAAkB,GAClBC,EAAkB,GAClB,IAAMQ,EAAUF,IAChBG,QAAQC,IAAIF,GAEZ,IAAK,IAAI3C,EAAM,EAAGA,EAAM,GAAIA,IAC1B,IAAK,IAAIR,EAAM,EAAGA,EAAM,GAAIA,IACd,KAARQ,GAAsB,KAARR,EAAYF,KAAKwD,QAAQ9C,EAAKR,EAAK,cACpC,KAARQ,GAAsB,KAARR,EACrBF,KAAKwD,QAAQ9C,EAAKR,EAAK,eACpBF,KAAKwD,QAAQ9C,EAAKR,EAAK,IAGhCF,KAAKoD,SAAS,CACZpC,KAAMqC,EACNL,gBAAgB,EAChBC,iBAAiB,EACjBC,kBAAkB,M,sCAINxC,EAAKR,GAEnB,GAAIF,KAAKyD,UAAU/C,EAAKR,EAAK,cAAe,CAC1CF,KAAKwD,QAAQ9C,EAAKR,EAAK,qBACvB,IAAMmD,EAAUK,EAA2B1D,KAAK+C,MAAM/B,KAAMN,EAAKR,GACjEF,KAAKoD,SAAS,CACZpC,KAAMqC,EACNJ,iBAAiB,EACjBD,gBAAgB,SAEb,GAAIhD,KAAKyD,UAAU/C,EAAKR,EAAK,eAAgB,CAElDF,KAAKwD,QAAQ9C,EAAKR,EAAK,sBACvB,IAAMmD,EAAUM,EAA4B3D,KAAK+C,MAAM/B,KAAMN,EAAKR,GAClEF,KAAKoD,SAAS,CACZpC,KAAMqC,EACNH,kBAAkB,EAClBF,gBAAgB,QAEb,CACL,IAAMK,EAAUO,EAA0B5D,KAAK+C,MAAM/B,KAAMN,EAAKR,GAChEF,KAAKoD,SAAS,CAAEpC,KAAMqC,EAASL,gBAAgB,O,uCAIlCtC,EAAKR,GACpB,GAAKF,KAAK+C,MAAMC,eAGhB,GAAIhD,KAAK+C,MAAME,iBACb,IAAKjD,KAAKyD,UAAU/C,EAAKR,EAAK,eAAgB,CAC5CF,KAAKwD,QAAQ9C,EAAKR,EAAK,qBACvB,IAAMmD,EAAUQ,EAA6B7D,KAAK+C,MAAM/B,KAAMN,EAAKR,GACnEF,KAAKoD,SAAS,CAAEpC,KAAMqC,UAEnB,GAAIrD,KAAK+C,MAAMG,kBACpB,IAAKlD,KAAKyD,UAAU/C,EAAKR,EAAK,cAAe,CAC3CF,KAAKwD,QAAQ9C,EAAKR,EAAK,sBACvB,IAAMmD,EAAUQ,EAA6B7D,KAAK+C,MAAM/B,KAAMN,EAAKR,GACnEF,KAAKoD,SAAS,CAAEpC,KAAMqC,SAEnB,CACL,IAAMA,EAAUO,EAA0B5D,KAAK+C,MAAM/B,KAAMN,EAAKR,GAChEF,KAAKoD,SAAS,CAAEpC,KAAMqC,O,qCAIX3C,EAAKR,GACbF,KAAK+C,MAAMC,iBAIbhD,KAAK+C,MAAME,kBACTjD,KAAKyD,UAAU/C,EAAKR,EAAK,gBAC3BF,KAAK+C,MAAMG,mBAAqBlD,KAAKyD,UAAU/C,EAAKR,EAAK,gBAE1DF,KAAKwD,QAAQ9C,EAAKR,EAAK,M,oCAGbQ,EAAKR,GACjB,GAAIF,KAAK+C,MAAME,gBAAiB,CAC9B,GAAIjD,KAAKyD,UAAU/C,EAAKR,EAAK,eAC3B,OAEFF,KAAKwD,QAAQ9C,EAAKR,EAAK,cACvB,IAAMmD,EAAUK,EAA2B1D,KAAK+C,MAAM/B,KAAMN,EAAKR,GACjEF,KAAKoD,SAAS,CAAEpC,KAAMqC,EAASJ,iBAAiB,IAChDN,EAAiBjC,EACjBgC,EAAiBxC,OACZ,GAAIF,KAAK+C,MAAMG,iBAAkB,CACtC,GAAIlD,KAAKyD,UAAU/C,EAAKR,EAAK,cAC3B,OAEFF,KAAKwD,QAAQ9C,EAAKR,EAAK,eACvB,IAAMmD,EAAUM,EAA4B3D,KAAK+C,MAAM/B,KAAMN,EAAKR,GAClEF,KAAKoD,SAAS,CAAEpC,KAAMqC,EAASH,kBAAkB,IACjDL,EAAkBnC,EAClBkC,EAAkB1C,EAEpBF,KAAKoD,SAAS,CAAEJ,gBAAgB,M,gCAGxBtC,EAAKR,EAAK4D,GAClB,OACEC,SAASC,eAAT,eAAgCtD,EAAhC,YAAuCR,IAAOW,YAA9C,eAAoEiD,K,8BAIhEpD,EAAKR,EAAK4D,GAChBC,SAASC,eAAT,eAAgCtD,EAAhC,YAAuCR,IAAOW,UAA9C,eAAkEiD,K,sCAYpD3C,EAAqB8C,GACnC,IAD8D,IAAD,kBACpDC,GACPC,YAAW,WACT,IAAM5C,EAAOJ,EAAoB+C,GAE/B,EAAKT,UAAUlC,EAAKb,IAAKa,EAAKrB,IAAK,eACnC,EAAKuD,UAAUlC,EAAKb,IAAKa,EAAKrB,IAAK,gBAGhC,EAAKsD,QAAQjC,EAAKb,IAAKa,EAAKrB,IAAK,kBACrC,GAAKgE,IATDA,EAAI,EAAGA,EAAI/C,EAAoBO,OAAQwC,IAAM,EAA7CA,GAWT,IAZ6D,eAYpDA,GACPC,YAAW,WACT,IAAM5C,EAAO0C,EAAyBC,GAEpC,EAAKT,UAAUlC,EAAKb,IAAKa,EAAKrB,IAAK,eACnC,EAAKuD,UAAUlC,EAAKb,IAAKa,EAAKrB,IAAK,gBAGhC,EAAKsD,QAAQjC,EAAKb,IAAKa,EAAKrB,IAAK,wBACR,GAA7BiB,EAAoBO,OAAc,GAAKwC,IATnCA,EAAI,EAAGA,EAAID,EAAyBvC,OAAQwC,IAAM,EAAlDA,K,0CAaU,IACXlD,EAAShB,KAAK+C,MAAd/B,KACFC,EAAYD,EAAK2B,GAAgBD,GACjCxB,EAAaF,EAAK6B,GAAiBD,GACnCzB,EAAsBJ,EAASC,EAAMC,EAAWC,GAChD+C,EDnIH,SAAqC/C,GAG1C,IAFA,IAAMkD,EAA2B,GAC7BC,EAAcnD,EACK,OAAhBmD,GACLD,EAAyBE,QAAQD,GACjCA,EAAcA,EAAY5B,aAE5B,OAAO2B,EC4H4BG,CAA4BrD,GAC7DlB,KAAKwE,gBAAgBrD,EAAqB8C,K,+BAGlC,IAAD,SAC0BjE,KAAK+C,MAA9B/B,EADD,EACCA,KAAMgC,EADP,EACOA,eACd,OACE,oCACE,yBAAKnC,UAAU,YACb,4BACEA,UAAU,kCACV4D,KAAK,SACLC,cAAY,YAHd,aAME,0BAAM7D,UAAU,WAElB,wBAAIA,UAAU,iBACZ,4BACE,4BAAQ4D,KAAK,SAASE,QAAS,kBAAM,EAAKC,sBAA1C,gBAKJ,4BAAQH,KAAK,SAASE,QAAS,kBAAM,EAAKE,UAA1C,UAKF,yBAAKhE,UAAU,QACZG,EAAK8D,KAAI,SAACpE,EAAKqE,GACd,OACE,yBAAKC,IAAKD,GACPrE,EAAIoE,KAAI,SAACvD,EAAM0D,GAAa,IACnB7E,EAAwCmB,EAAxCnB,QAASD,EAA+BoB,EAA/BpB,SAAUE,EAAqBkB,EAArBlB,OAAQK,EAAaa,EAAbb,IAAKR,EAAQqB,EAARrB,IACxC,OACE,kBAAC,EAAD,CACE8E,IAAKC,EACL7E,QAASA,EACTD,SAAUA,EACVO,IAAKA,EACLR,IAAKA,EACLG,OAAQA,EACR2C,eAAgBA,EAChBzC,aAAc,SAACG,EAAKR,GAAN,OACZ,EAAKgF,iBAAiBxE,EAAKR,IAE7BO,WAAY,SAACC,EAAKR,GAAN,OAAc,EAAKiF,eAAezE,EAAKR,IACnDI,YAAa,SAACI,EAAKR,GAAN,OAAc,EAAKkF,gBAAgB1E,EAAKR,IACrDM,UAAW,SAACE,EAAKR,GAAN,OAAc,EAAKmF,cAAc3E,EAAKR,mB,GA5NpBY,aAyO7CqC,EAAiB,WAErB,IADA,IAAMnC,EAAO,GACJN,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAM4E,EAAa,GACVpF,EAAM,EAAGA,EAAM,GAAIA,IAC1BoF,EAAW9D,KAAK+D,EAAWrF,EAAKQ,IAElCM,EAAKQ,KAAK8D,GAEZ,OAAOtE,GAGHuE,EAAa,SAACrF,EAAKQ,GACvB,MAAO,CACLR,MACAQ,MACAN,QAASM,IAAQiC,GAAkBzC,IAAQwC,EAC3CvC,SAAUO,IAAQmC,GAAmB3C,IAAQ0C,EAC7CxB,SAAUU,IACVC,WAAW,EACXyD,QAAQ,EACRnF,QAAQ,EACRoC,aAAc,OAIZmB,EAA4B,SAAC5C,EAAMN,EAAKR,GAC5C,GAAIc,EAAKN,GAAKR,GAAKE,SAAWY,EAAKN,GAAKR,GAAKC,SAAU,OAAOa,EAC9D,IAAMqC,EAAUrC,EAAKyE,QACflE,EAAO8B,EAAQ3C,GAAKR,GACpBwF,EAAO,2BACRnE,GADQ,IAEXlB,QAAQ,IAGV,OADAgD,EAAQ3C,GAAKR,GAAOwF,EACbrC,GAGHQ,EAA+B,SAAC7C,EAAMN,EAAKR,GAC/C,IAAMmD,EAAUrC,EAAKyE,QACflE,EAAO8B,EAAQ3C,GAAKR,GACpBwF,EAAO,2BACRnE,GADQ,IAEXlB,QAAQ,IAGV,OADAgD,EAAQ3C,GAAKR,GAAOwF,EACbrC,GAGHK,EAA6B,SAAC1C,EAAMN,EAAKR,GAC7C,IAAMmD,EAAUrC,EAAKyE,QACflE,EAAO8B,EAAQ3C,GAAKR,GACpBwF,EAAO,2BACRnE,GADQ,IAEXnB,SAAUmB,EAAKnB,UAGjB,OADAiD,EAAQ3C,GAAKR,GAAOwF,EACbrC,GAGHM,EAA8B,SAAC3C,EAAMN,EAAKR,GAC9C,IAAMmD,EAAUrC,EAAKyE,QACflE,EAAO8B,EAAQ3C,GAAKR,GACpBwF,EAAO,2BACRnE,GADQ,IAEXpB,UAAWoB,EAAKpB,WAGlB,OADAkD,EAAQ3C,GAAKR,GAAOwF,EACbrC,GChTMsC,MARf,WACE,OACE,yBAAK9E,UAAU,OACb,kBAAC,EAAD,QCKc+E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASC,eAAe,SDyHpB,kBAAmBoC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.569962ff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      onMouseOut,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseUp={() => onMouseUp(row, col)}\r\n        onMouseOut={() => onMouseOut(row, col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    // while it's a neighbor\r\n\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    // if wall, skip\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n\r\n\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((node1, node2) => node1.distance - node2.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const { row, col } = node;\r\n\r\n  const neighbors = [];\r\n\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const NodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    NodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return NodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport \"bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/dist/js/bootstrap.js\";\r\n// import $ from \"jquery\";\r\n// import Popper from \"popper.js\";\r\nimport \"./PathfindingVisualizer.css\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\n\r\nvar START_NODE_COL = 15;\r\nvar START_NODE_ROW = 10;\r\nvar FINISH_NODE_COL = 35;\r\nvar FINISH_NODE_ROW = 10;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      startNodeMoving: false,\r\n      finishNodeMoving: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  clear() {\r\n    START_NODE_COL = 15;\r\n    START_NODE_ROW = 10;\r\n    FINISH_NODE_COL = 35;\r\n    FINISH_NODE_ROW = 10;\r\n    const newGrid = getInitialGrid();\r\n    console.log(newGrid);\r\n\r\n    for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        if (row === 10 && col === 15) this.setNode(row, col, \"node-start\");\r\n        else if (row === 10 && col === 35)\r\n          this.setNode(row, col, \"node-finish\");\r\n        else this.setNode(row, col, \"\");\r\n      }\r\n    }\r\n    this.setState({\r\n      grid: newGrid,\r\n      mouseIsPressed: false,\r\n      startNodeMoving: false,\r\n      finishNodeMoving: false,\r\n    });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    // if trying to move start node\r\n    if (this.checkNode(row, col, \"node-start\")) {\r\n      this.setNode(row, col, \"node-start-moving\");\r\n      const newGrid = getNewGridWithStartToggled(this.state.grid, row, col);\r\n      this.setState({\r\n        grid: newGrid,\r\n        startNodeMoving: true,\r\n        mouseIsPressed: true,\r\n      });\r\n    } else if (this.checkNode(row, col, \"node-finish\")) {\r\n      // if trying to move finish node\r\n      this.setNode(row, col, \"node-finish-moving\");\r\n      const newGrid = getNewGridWithFinishToggled(this.state.grid, row, col);\r\n      this.setState({\r\n        grid: newGrid,\r\n        finishNodeMoving: true,\r\n        mouseIsPressed: true,\r\n      });\r\n    } else {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) {\r\n      return;\r\n    }\r\n    if (this.state.startNodeMoving) {\r\n      if (!this.checkNode(row, col, \"node-finish\")) {\r\n        this.setNode(row, col, \"node-start-moving\");\r\n        const newGrid = getNewGridWithWallToggledOff(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    } else if (this.state.finishNodeMoving) {\r\n      if (!this.checkNode(row, col, \"node-start\")) {\r\n        this.setNode(row, col, \"node-finish-moving\");\r\n        const newGrid = getNewGridWithWallToggledOff(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    } else {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseOut(row, col) {\r\n    if (!this.state.mouseIsPressed) {\r\n      return;\r\n    }\r\n    if (\r\n      (this.state.startNodeMoving &&\r\n        !this.checkNode(row, col, \"node-finish\")) ||\r\n      (this.state.finishNodeMoving && !this.checkNode(row, col, \"node-start\"))\r\n    ) {\r\n      this.setNode(row, col, \"\");\r\n    }\r\n  }\r\n  handleMouseUp(row, col) {\r\n    if (this.state.startNodeMoving) {\r\n      if (this.checkNode(row, col, \"node-finish\")) {\r\n        return;\r\n      }\r\n      this.setNode(row, col, \"node-start\");\r\n      const newGrid = getNewGridWithStartToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, startNodeMoving: false });\r\n      START_NODE_ROW = row;\r\n      START_NODE_COL = col;\r\n    } else if (this.state.finishNodeMoving) {\r\n      if (this.checkNode(row, col, \"node-start\")) {\r\n        return;\r\n      }\r\n      this.setNode(row, col, \"node-finish\");\r\n      const newGrid = getNewGridWithFinishToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, finishNodeMoving: false });\r\n      FINISH_NODE_ROW = row;\r\n      FINISH_NODE_COL = col;\r\n    }\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n  // helper method to make code cleaner\r\n  checkNode(row, col, name) {\r\n    return (\r\n      document.getElementById(`node-${row}-${col}`).className === `node ${name}`\r\n    );\r\n  }\r\n  // helper method to make code cleaner\r\n  setNode(row, col, name) {\r\n    document.getElementById(`node-${row}-${col}`).className = `node ${name}`;\r\n  }\r\n\r\n  // handleEntirePageMouseDown() {\r\n  //   this.setState({ mouseIsPressed: true });\r\n  //\r\n  // }\r\n  // handleEntirePageMouseUp() {\r\n  //   this.setState({ mouseIsPressed: false });\r\n  //\r\n  // }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if (\r\n          this.checkNode(node.row, node.col, \"node-start\") ||\r\n          this.checkNode(node.row, node.col, \"node-finish\")\r\n        ) {\r\n        } // BAD\r\n        else this.setNode(node.row, node.col, \"node-visited\");\r\n      }, 10 * i);\r\n    }\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if (\r\n          this.checkNode(node.row, node.col, \"node-start\") ||\r\n          this.checkNode(node.row, node.col, \"node-finish\")\r\n        ) {\r\n        } // BAD\r\n        else this.setNode(node.row, node.col, \"node-shortest-path\");\r\n      }, visitedNodesInOrder.length * 10 + 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    return (\r\n      <>\r\n        <div className='dropdown'>\r\n          <button\r\n            className='btn btn-primary dropdown-toggle'\r\n            type='button'\r\n            data-toggle='dropdown'\r\n          >\r\n            Algorithms\r\n            <span className='caret'></span>\r\n          </button>\r\n          <ul className='dropdown-menu'>\r\n            <li>\r\n              <button type='button' onClick={() => this.visualizeDijkstra()}>\r\n                Dijkstra's\r\n              </button>\r\n            </li>\r\n          </ul>\r\n          <button type='button' onClick={() => this.clear()}>\r\n            Clear\r\n          </button>\r\n        </div>\r\n\r\n        <div className='grid'>\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { isStart, isFinish, isWall, row, col } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      row={row}\r\n                      col={col}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseOut={(row, col) => this.handleMouseOut(row, col)}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseUp={(row, col) => this.handleMouseUp(row, col)}\r\n                    ></Node> // to get rid of error have to add a key\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isPath: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  if (grid[row][col].isStart || grid[row][col].isFinish) return grid;\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node, // copy all parameters but change only what's listed below\r\n    isWall: true,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithWallToggledOff = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node, // copy all parameters but change only what's listed below\r\n    isWall: false,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithStartToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isStart: !node.isStart,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithFinishToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isFinish: !node.isFinish,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}