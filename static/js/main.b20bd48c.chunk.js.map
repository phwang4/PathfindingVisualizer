{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/greedy.js","algorithms/astar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","onMouseOut","isVisited","row","extraClassName","id","className","Component","sortNodesByDistance","unvisitedNodes","sort","node1","node2","distance","updateUnvisitedNeighbors","node","grid","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","push","length","filter","getAllNodes","nodes","getNodesInShortestPathOrder","finishNode","NodesInShortestPathOrder","currentNode","unshift","manhattanDistance","startNode","Math","abs","console","log","BinaryHeap","scoreFunction","content","prototype","element","sinkDown","pop","result","end","bubbleUp","remove","i","indexOf","size","rescoreElement","n","parentN","parent","elemScore","child1Score","child2N","child1N","swap","child1","child2","START_NODE_COL","START_NODE_ROW","FINISH_NODE_COL","FINISH_NODE_ROW","PathfindingVisualizer","state","mouseIsPressed","startNodeMoving","finishNodeMoving","getInitialGrid","setState","newGrid","setNode","checkNode","getNewGridWithStartToggled","getNewGridWithFinishToggled","getNewGridWithWallToggled","getNewGridWithWallToggledOff","name","document","getElementById","visitedNodesInOrder","nodesInShortestPathOrder","setTimeout","closestNode","shift","Infinity","dijkstra","animateDijkstra","greedy","openHeap","f","isClosed","gScore","g","cost","beenVisited","h","astar","slice","isPath","newNode","type","data-toggle","onClick","visualizeDijkstra","visualizeGreedy","visualizeAStar","clear","map","rowIdx","key","nodeIdx","handleMouseEnter","handleMouseOut","handleMouseDown","handleMouseUp","currentRow","createNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b20bd48c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      onMouseOut,\r\n      isVisited,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : isVisited\r\n      ? \"node-visited\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseUp={() => onMouseUp(row, col)}\r\n        onMouseOut={() => onMouseOut(row, col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  sortNodesByDistance(unvisitedNodes);\r\n  while (!!unvisitedNodes.length) {\r\n    // while there are still unvisited nodes\r\n\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n\r\n    if (closestNode.isWall) continue;\r\n    // if wall, skip\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nexport function sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((node1, node2) => node1.distance - node2.distance);\r\n}\r\n\r\nexport function updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n  const { row, col } = node;\r\n\r\n  const neighbors = [];\r\n\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nexport function getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const NodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    NodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return NodesInShortestPathOrder;\r\n}\r\n","import {\r\n  sortNodesByDistance,\r\n  getAllNodes,\r\n  getUnvisitedNeighbors,\r\n} from \"./dijkstra\";\r\n\r\nexport function greedy(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  sortNodesByDistance(unvisitedNodes);\r\n  while (!!unvisitedNodes.length) {\r\n    // while there are still unvisited nodes\r\n\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n\r\n    if (closestNode.isWall) continue;\r\n    // if wall, skip\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid, finishNode);\r\n  }\r\n}\r\n\r\nfunction manhattanDistance(startNode, finishNode) {\r\n  return (\r\n    Math.abs(startNode.row - finishNode.row) +\r\n    Math.abs(startNode.col - finishNode.col)\r\n  );\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (finishNode) {\r\n      var distance = manhattanDistance(neighbor, finishNode);\r\n      neighbor.distance = distance;\r\n      neighbor.previousNode = node;\r\n    } else {\r\n      console.log(\"else\");\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n}\r\n","export function astar(grid, startNode, finishNode) {\r\n  var visitedNodesInOrder = [];\r\n\r\n  var openHeap = new BinaryHeap(function (node) {\r\n    return node.f;\r\n  });\r\n\r\n  openHeap.push(startNode);\r\n\r\n  while (openHeap.size() > 0) {\r\n    // grab lowest fx, heap keeps it sorted\r\n    var currentNode = openHeap.pop();\r\n    currentNode.isVisited = true;\r\n    visitedNodesInOrder.push(currentNode);\r\n    // end case\r\n    if (currentNode === finishNode) {\r\n      //   var curr = currentNode;\r\n\r\n      //   while (curr.previousNode) {\r\n      //     visitedNodesInOrder.push(curr);\r\n      //     curr = curr.previousNode;\r\n      //   }\r\n      return visitedNodesInOrder;\r\n    }\r\n    // normal case -- move currentNode from open to close, process neighbors\r\n    currentNode.isClosed = true;\r\n\r\n    // find all neighbors\r\n    var neighbors = getUnvisitedNeighbors(currentNode, grid);\r\n\r\n    for (const neighbor of neighbors) {\r\n      if (neighbor.isClosed || neighbor.isWall) {\r\n        // not a valid node\r\n        continue;\r\n      }\r\n\r\n      // g score is cost so far to reach node\r\n      // need to check if path is shortest\r\n      var gScore = currentNode.g + neighbor.cost;\r\n      var beenVisited = neighbor.isVisited;\r\n\r\n      if (!beenVisited || gScore < neighbor.g) {\r\n        // found and optimal path, so take score and see how good it is\r\n        neighbor.isVisited = true;\r\n        visitedNodesInOrder.push(neighbor);\r\n        neighbor.previousNode = currentNode;\r\n        neighbor.h = manhattanDistance(neighbor, finishNode);\r\n        neighbor.g = gScore;\r\n        neighbor.f = neighbor.g + neighbor.h;\r\n\r\n        if (!beenVisited) {\r\n          // push will put it in proper place based on f value\r\n          openHeap.push(neighbor);\r\n        } else {\r\n          // already seen node but has been rescored\r\n          openHeap.rescoreElement(neighbor);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // no result was found\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const { row, col } = node;\r\n\r\n  const neighbors = [];\r\n\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction manhattanDistance(startNode, finishNode) {\r\n  return (\r\n    Math.abs(startNode.row - finishNode.row) +\r\n    Math.abs(startNode.col - finishNode.col)\r\n  );\r\n}\r\n\r\nfunction BinaryHeap(scoreFunction) {\r\n  this.content = [];\r\n  this.scoreFunction = scoreFunction;\r\n}\r\n\r\nBinaryHeap.prototype = {\r\n  push: function (element) {\r\n    // Add the new element to the end of the array.\r\n    this.content.push(element);\r\n\r\n    // Allow it to sink down.\r\n    this.sinkDown(this.content.length - 1);\r\n  },\r\n  pop: function () {\r\n    // Store the first element so we can return it later.\r\n    var result = this.content[0];\r\n    // Get the element at the end of the array.\r\n    var end = this.content.pop();\r\n    // If there are any elements left, put the end element at the\r\n    // start, and let it bubble up.\r\n    if (this.content.length > 0) {\r\n      this.content[0] = end;\r\n      this.bubbleUp(0);\r\n    }\r\n    return result;\r\n  },\r\n  remove: function (node) {\r\n    var i = this.content.indexOf(node);\r\n\r\n    // When it is found, the process seen in 'pop' is repeated\r\n    // to fill up the hole.\r\n    var end = this.content.pop();\r\n\r\n    if (i !== this.content.length - 1) {\r\n      this.content[i] = end;\r\n\r\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\r\n        this.sinkDown(i);\r\n      } else {\r\n        this.bubbleUp(i);\r\n      }\r\n    }\r\n  },\r\n  size: function () {\r\n    return this.content.length;\r\n  },\r\n  rescoreElement: function (node) {\r\n    this.sinkDown(this.content.indexOf(node));\r\n  },\r\n  sinkDown: function (n) {\r\n    // Fetch the element that has to be sunk.\r\n    var element = this.content[n];\r\n\r\n    // When at 0, an element can not sink any further.\r\n    while (n > 0) {\r\n      // Compute the parent element's index, and fetch it.\r\n      var parentN = ((n + 1) >> 1) - 1;\r\n      var parent = this.content[parentN];\r\n      // Swap the elements if the parent is greater.\r\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\r\n        this.content[parentN] = element;\r\n        this.content[n] = parent;\r\n        // Update 'n' to continue at the new position.\r\n        n = parentN;\r\n      }\r\n      // Found a parent that is less, no need to sink any further.\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n  },\r\n  bubbleUp: function (n) {\r\n    // Look up the target element and its score.\r\n    var length = this.content.length;\r\n    var element = this.content[n];\r\n    var elemScore = this.scoreFunction(element);\r\n\r\n    while (true) {\r\n      // Compute the indices of the child elements.\r\n      var child2N = (n + 1) << 1;\r\n      var child1N = child2N - 1;\r\n      // This is used to store the new position of the element, if any.\r\n      var swap = null;\r\n      var child1Score;\r\n      // If the first child exists (is inside the array)...\r\n      if (child1N < length) {\r\n        // Look it up and compute its score.\r\n        var child1 = this.content[child1N];\r\n        child1Score = this.scoreFunction(child1);\r\n\r\n        // If the score is less than our element's, we need to swap.\r\n        if (child1Score < elemScore) {\r\n          swap = child1N;\r\n        }\r\n      }\r\n\r\n      // Do the same checks for the other child.\r\n      if (child2N < length) {\r\n        var child2 = this.content[child2N];\r\n        var child2Score = this.scoreFunction(child2);\r\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\r\n          swap = child2N;\r\n        }\r\n      }\r\n\r\n      // If the element needs to be moved, swap it, and continue.\r\n      if (swap !== null) {\r\n        this.content[n] = this.content[swap];\r\n        this.content[swap] = element;\r\n        n = swap;\r\n      }\r\n      // Otherwise, we are done.\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n  },\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport \"bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/dist/js/bootstrap.js\";\r\n// import $ from \"jquery\";\r\n// import Popper from \"popper.js\";\r\nimport \"./PathfindingVisualizer.css\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\nimport { greedy } from \"../algorithms/greedy\";\r\nimport { astar } from \"../algorithms/astar\";\r\n\r\nvar START_NODE_COL = 15;\r\nvar START_NODE_ROW = 10;\r\nvar FINISH_NODE_COL = 35;\r\nvar FINISH_NODE_ROW = 10;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      startNodeMoving: false,\r\n      finishNodeMoving: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  clear() {\r\n    START_NODE_COL = 15;\r\n    START_NODE_ROW = 10;\r\n    FINISH_NODE_COL = 35;\r\n    FINISH_NODE_ROW = 10;\r\n    const newGrid = getInitialGrid();\r\n\r\n    for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        if (row === 10 && col === 15) this.setNode(row, col, \"node-start\");\r\n        else if (row === 10 && col === 35)\r\n          this.setNode(row, col, \"node-finish\");\r\n        else this.setNode(row, col, \"\");\r\n      }\r\n    }\r\n    this.setState({\r\n      grid: newGrid,\r\n      mouseIsPressed: false,\r\n      startNodeMoving: false,\r\n      finishNodeMoving: false,\r\n    });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    // if trying to move start node\r\n    if (this.checkNode(row, col, \"node-start\")) {\r\n      this.setNode(row, col, \"node-start-moving\");\r\n      const newGrid = getNewGridWithStartToggled(this.state.grid, row, col);\r\n      this.setState({\r\n        grid: newGrid,\r\n        startNodeMoving: true,\r\n        mouseIsPressed: true,\r\n      });\r\n    } else if (this.checkNode(row, col, \"node-finish\")) {\r\n      // if trying to move finish node\r\n      this.setNode(row, col, \"node-finish-moving\");\r\n      const newGrid = getNewGridWithFinishToggled(this.state.grid, row, col);\r\n      this.setState({\r\n        grid: newGrid,\r\n        finishNodeMoving: true,\r\n        mouseIsPressed: true,\r\n      });\r\n    } else {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) {\r\n      return;\r\n    }\r\n    if (this.state.startNodeMoving) {\r\n      if (!this.checkNode(row, col, \"node-finish\")) {\r\n        this.setNode(row, col, \"node-start-moving\");\r\n        const newGrid = getNewGridWithWallToggledOff(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    } else if (this.state.finishNodeMoving) {\r\n      if (!this.checkNode(row, col, \"node-start\")) {\r\n        this.setNode(row, col, \"node-finish-moving\");\r\n        const newGrid = getNewGridWithWallToggledOff(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    } else {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseOut(row, col) {\r\n    if (!this.state.mouseIsPressed) {\r\n      return;\r\n    }\r\n    if (\r\n      (this.state.startNodeMoving &&\r\n        !this.checkNode(row, col, \"node-finish\")) ||\r\n      (this.state.finishNodeMoving && !this.checkNode(row, col, \"node-start\"))\r\n    ) {\r\n      this.setNode(row, col, \"\");\r\n    }\r\n  }\r\n  handleMouseUp(row, col) {\r\n    if (this.state.startNodeMoving) {\r\n      if (this.checkNode(row, col, \"node-finish\")) {\r\n        return;\r\n      }\r\n      this.setNode(row, col, \"node-start\");\r\n      const newGrid = getNewGridWithStartToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, startNodeMoving: false });\r\n      START_NODE_ROW = row;\r\n      START_NODE_COL = col;\r\n    } else if (this.state.finishNodeMoving) {\r\n      if (this.checkNode(row, col, \"node-start\")) {\r\n        return;\r\n      }\r\n      this.setNode(row, col, \"node-finish\");\r\n      const newGrid = getNewGridWithFinishToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, finishNodeMoving: false });\r\n      FINISH_NODE_ROW = row;\r\n      FINISH_NODE_COL = col;\r\n    }\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n  // helper method to make code cleaner\r\n  checkNode(row, col, name) {\r\n    return (\r\n      document.getElementById(`node-${row}-${col}`).className === `node ${name}`\r\n    );\r\n  }\r\n  // helper method to make code cleaner\r\n  setNode(row, col, name) {\r\n    document.getElementById(`node-${row}-${col}`).className = `node ${name}`;\r\n  }\r\n\r\n  // handleEntirePageMouseDown() {\r\n  //   this.setState({ mouseIsPressed: true });\r\n  //\r\n  // }\r\n  // handleEntirePageMouseUp() {\r\n  //   this.setState({ mouseIsPressed: false });\r\n  //\r\n  // }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if (\r\n          this.checkNode(node.row, node.col, \"node-start\") ||\r\n          this.checkNode(node.row, node.col, \"node-finish\")\r\n        ) {\r\n        } // BAD\r\n        else this.setNode(node.row, node.col, \"node-visited\");\r\n      }, 10 * i);\r\n    }\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if (\r\n          this.checkNode(node.row, node.col, \"node-start\") ||\r\n          this.checkNode(node.row, node.col, \"node-finish\")\r\n        ) {\r\n        } // BAD\r\n        else this.setNode(node.row, node.col, \"node-shortest-path\");\r\n      }, visitedNodesInOrder.length * 10 + 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  visualizeGreedy() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = greedy(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  visualizeAStar() {\r\n    const { grid } = this.state;\r\n\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  updateGrid(grid) {\r\n    const newGrid = grid.slice();\r\n\r\n    for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        if (newGrid[row][col].isVisited || newGrid[row][col].isPath) {\r\n          const node = newGrid[row][col];\r\n          const newNode = {\r\n            ...node,\r\n            isVisited: false,\r\n            isPath: false,\r\n          };\r\n          newGrid[row][col] = newNode;\r\n        }\r\n      }\r\n    }\r\n    return newGrid;\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    return (\r\n      <>\r\n        <div className='dropdown'>\r\n          <button\r\n            className='btn btn-primary dropdown-toggle'\r\n            type='button'\r\n            data-toggle='dropdown'\r\n          >\r\n            Algorithms\r\n            <span className='caret'></span>\r\n          </button>\r\n          <ul className='dropdown-menu'>\r\n            <li>\r\n              <button type='button' onClick={() => this.visualizeDijkstra()}>\r\n                Dijkstra's\r\n              </button>\r\n            </li>\r\n            <li>\r\n              <button type='button' onClick={() => this.visualizeGreedy()}>\r\n                Greedy BFS\r\n              </button>\r\n            </li>\r\n            <li>\r\n              <button type='button' onClick={() => this.visualizeAStar()}>\r\n                A* Search\r\n              </button>\r\n            </li>\r\n          </ul>\r\n          <button type='button' onClick={() => this.clear()}>\r\n            Clear\r\n          </button>\r\n        </div>\r\n\r\n        <div className='grid'>\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {\r\n                    isStart,\r\n                    isFinish,\r\n                    isWall,\r\n                    row,\r\n                    col,\r\n                    isVisited,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      row={row}\r\n                      col={col}\r\n                      isWall={isWall}\r\n                      isVisited={isVisited}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseOut={(row, col) => this.handleMouseOut(row, col)}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseUp={(row, col) => this.handleMouseUp(row, col)}\r\n                    ></Node> // to get rid of error have to add a key\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isClosed: false,\r\n    isPath: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n    f: 0,\r\n    g: 0,\r\n    h: 0,\r\n    cost: 1,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  if (grid[row][col].isStart || grid[row][col].isFinish) return grid;\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node, // copy all parameters but change only what's listed below\r\n    isWall: true,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithWallToggledOff = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node, // copy all parameters but change only what's listed below\r\n    isWall: false,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithStartToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isStart: !node.isStart,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithFinishToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isFinish: !node.isFinish,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}